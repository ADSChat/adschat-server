# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Tag-Release

# This workflow can be used for pushing to the production server and will only be ran when code is pushed to the main branch

on:
  push:
    tags:
      - "v*"




jobs:
  build:

    runs-on: ubuntu-latest
    container: node:16
    
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        env:
          POSTGRES_PASSWORD: 123
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        # Docker Hub image
        image: redis
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v2
      - name: Install Dependencies
        run: |
          npm i -g pnpm
          pnpm i
      - name: Prisma Migrate
        run: pnpm run prisma:migrate_dev
        env:
          DATABASE_URL: "postgresql://postgres:123@postgres:5432/postgres"
      - name: Testing
        run: pnpm run test
        env:
          DATABASE_URL: "postgresql://postgres:123@postgres:5432/postgres"
          DEV_MODE: true
          REDIS_HOST: redis
          REDIS_PORT: 6379
          JWT_SECRET: "change me"
          PORT: 80
          MAX_CHANNELS_PER_SERVER: 100
          MAX_INVITES_PER_SERVER: 10
          MAX_ROLES_PER_SERVER: 30
          DEFAULT_SERVER_ROLE_COLOR: "#fff"
      - name: Copy package.json & package-lock.json
        run: |
          cp package.json build/
          cp package-lock.json build/
      - name: Get the version
        id: get_version
        run: echo "VERSION=$(echo $GITHUB_REF | cut -d / -f 3)" >> $GITHUB_OUTPUT
      - name: Zip The Build
        uses: vimtor/action-zip@v1
        with:
          files: build/
          dest: chat-server-${{ steps.get_version.outputs.VERSION }}.zip
      - name: Publish Draft Release
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: false
          draft: true
          files: |
            chat-server-${{ steps.get_version.outputs.VERSION }}.zip